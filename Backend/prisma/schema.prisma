// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid()) @db.NVarChar(100)
  username   String    @unique @db.NVarChar(100)
  password   String    @db.NVarChar(100)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  createUser String?   @db.NVarChar(100)
  updateUser String?   @db.NVarChar(100)
  tickets    Ticket[]
}

model Ticket {
  id                String         @id @default(uuid()) @db.NVarChar(100)
  title             String         @db.NVarChar(100)
  responsibleUserId String?        @db.NVarChar(100)
  responsibleUser   User?          @relation(references: [id], fields: [responsibleUserId])
  description       String         @db.NVarChar(max)
  dueDate           DateTime?      @db.DateTime
  priorityId        String         @db.NVarChar(100)
  priority          TicketPriority @relation(references: [id], fields: [priorityId])
  createdAt         DateTime?      @default(now())
  updatedAt         DateTime?      @updatedAt
  createUser        String?        @db.NVarChar(100)
  updateUser        String?        @db.NVarChar(100)
  statusId          String?        @db.NVarChar(100)
  status            TicketStatus?  @relation(fields: [statusId], references: [id])
}

model TicketPriority {
  id         String    @id @default(uuid()) @db.NVarChar(100)
  color      String    @db.NVarChar(50)
  name       String    @db.NVarChar(50)
  tickets    Ticket[]
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  createUser String?   @db.NVarChar(100)
  updateUser String?   @db.NVarChar(100)
}

model TicketStatus {
  id         String    @id @default(uuid()) @db.NVarChar(100)
  color      String    @db.NVarChar(50)
  name       String    @db.NVarChar(50)
  tickets    Ticket[]
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  createUser String?   @db.NVarChar(100)
  updateUser String?   @db.NVarChar(100)
}

model Comment {
  id         String    @id @default(uuid()) @db.NVarChar(100)
  content    String    @db.NVarChar(255)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  createUser String?   @db.NVarChar(100)
  updateUser String?   @db.NVarChar(100)
}

model TicketDueDate {
  durationInMinutes Int       @unique @db.Int
  color             String    @db.NVarChar(50)
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
  createUser        String?   @db.NVarChar(100)
  updateUser        String?   @db.NVarChar(100)
}

model Test {
  id          Int      @id @default(autoincrement())
  isAmazing   Boolean  @db.Bit
  description String   @db.NVarChar(100)
  createdAt   DateTime @default(now())
}

model File {
  id               String    @id @default(uuid()) @db.NVarChar(100)
  fileName         String?   @db.NVarChar(100)
  originalFileName String?   @db.NVarChar(100)
  mimeType         String    @db.NVarChar(20)
  content          Bytes
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
  createUser       String?   @db.NVarChar(100)
  updateUser       String?   @db.NVarChar(100)
}
